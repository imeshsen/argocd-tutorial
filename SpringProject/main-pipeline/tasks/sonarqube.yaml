apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: sonarqube-scanner
  namespace: argo-demo
  labels:
    app.kubernetes.io/version: '0.4'
    hub.tekton.dev/catalog: tekton
spec:
  description: |-
    The following task can be used to perform static analysis on the source code provided the SonarQube server is hosted
    SonarQube is the leading tool for continuously inspecting the Code Quality and Security of your codebases, all while empowering development teams. Analyze over 25 popular programming languages including C#, VB.Net, JavaScript, TypeScript and C++. It detects bugs, vulnerabilities and code smells across project branches and pull requests.
  params:
    - default: ''
      description: SonarQube server URL
      name: SONAR_HOST_URL
      type: string
    - default: sonar-scan
      description: Project's unique key
      name: SONAR_PROJECT_KEY
      type: string
    - default: '1.0'
      description: 'Version of the project. Default: 1.0'
      name: PROJECT_VERSION
      type: string
    - default: .
      description: Comma-separated paths to directories containing main source files
      name: SOURCE_TO_SCAN
      type: string
    - default: sonar-demo
      description: The organization in sonarqube where the project exists
      name: SONAR_ORGANIZATION
      type: string
    - default: 'docker.io/sonarsource/sonar-scanner-cli:5'
      description: The sonarqube scanner CLI image which will run the scan
      name: SONAR_SCANNER_IMAGE
      type: string
    - default: admin
      description: Name of the file of the login within the sonarqube credentials workspace
      name: SONAR_LOGIN_KEY
      type: string
    - default: '1234'
      description: Name of the file of the password within the sonarqube credentials workspace
      name: SONAR_PASSWORD_KEY
      type: string
    - default: sqp_8c9d779a9ffd0c23fb2e5baf69d102e528c6f93a
      description: Sonarqube server token
      name: SONAR_TOKEN
      type: string
  steps:
    - computeResources: {}
      env:
        - name: SONAR_HOST_URL
          value: $(params.SONAR_HOST_URL)
        - name: SONAR_PROJECT_KEY
          value: $(params.SONAR_PROJECT_KEY)
        - name: PROJECT_VERSION
          value: $(params.PROJECT_VERSION)
        - name: SOURCE_TO_SCAN
          value: $(params.SOURCE_TO_SCAN)
        - name: SONAR_ORGANIZATION
          value: $(params.SONAR_ORGANIZATION)
        - name: SONAR_TOKEN
          value: $(params.SONAR_TOKEN)
      image: 'registry.access.redhat.com/ubi8/ubi-minimal:8.2'
      name: sonar-properties-create
      script: |
        #!/usr/bin/env bash

        replaceValues() {
          filename=$1
          thekey=$2
          newvalue=$3

          if ! grep -R "^[#]*\s*${thekey}=.*" $filename >/dev/null; then
            echo "APPENDING because '${thekey}' not found"
            echo "" >>$filename
            echo "$thekey=$newvalue" >>$filename
          else
            echo "SETTING because '${thekey}' found already"
            sed -ir "s|^[#]*\s*${thekey}=.*|$thekey=$newvalue|" $filename
          fi
        }

        if [[ "$(workspaces.sonar-settings.bound)" == "true" ]]; then
          if [[ -f $(workspaces.sonar-settings.path)/sonar-project.properties ]]; then
            echo "using user provided sonar-project.properties file"
            cp -RL $(workspaces.sonar-settings.path)/sonar-project.properties $(workspaces.source.path)/sonar-project.properties
          fi
        fi

        if [[ -f $(workspaces.source.path)/sonar-project.properties ]]; then
          if [[ -n "${SONAR_HOST_URL}" ]]; then
            echo "replacing sonar host URL"
            replaceValues $(workspaces.source.path)/sonar-project.properties sonar.host.url "${SONAR_HOST_URL}"
          fi
          if [[ -n "${SONAR_PROJECT_KEY}" ]]; then
            echo "replacing sonar project key"
            replaceValues $(workspaces.source.path)/sonar-project.properties sonar.projectKey "${SONAR_PROJECT_KEY}"
          fi
          echo "Values in sonar-project.properties file replaced successfully..."
        else
          echo "Creating sonar-project.properties file..."
          touch sonar-project.properties
          [[ -n "${SONAR_PROJECT_KEY}" ]] && {
            echo "sonar.projectKey=${SONAR_PROJECT_KEY}" >> sonar-project.properties
          } || {
            echo "missing property SONAR_PROJECT_KEY"
            exit 1
          }

          [[ -n "${SONAR_HOST_URL}" ]] && {
            echo "sonar.host.url=${SONAR_HOST_URL}" >> sonar-project.properties
          } || {
            echo "missing property SONAR_HOST_URL"
            exit 1
          }

          [[ -n "${PROJECT_VERSION}" ]] && {
            echo "sonar.projectVersion=${PROJECT_VERSION}" >> sonar-project.properties
          } || {
            echo "missing property PROJECT_VERSION"
            exit 1
          }

          [[ -n "${SONAR_ORGANIZATION}" ]] && {
            echo "sonar.organization=${SONAR_ORGANIZATION}" >> sonar-project.properties
          } || {
            echo "missing property SONAR_ORGANIZATION"
            exit 1
          }
          echo "sonar.sources=${SOURCE_TO_SCAN}" >> sonar-project.properties
          echo "---------------------------"
          cat $(workspaces.source.path)/sonar-project.properties
        fi

          [[ -n "${SONAR_TOKEN}" ]] && {
            echo "sonar.token=${SONAR_TOKEN}" >> sonar-project.properties
            echo "sonar.java.binaries=./target/classes" >> sonar-project.properties
          } || {
            echo "missing property PROJECT_TOKEN"
            exit 1
          }

          

        if [[ "$(workspaces.sonar-credentials.bound)" == "true" ]]; then
          if [[ -f $(workspaces.sonar-credentials.path)/$(params.SONAR_PASSWORD_KEY) ]]; then
            SONAR_PASSWORD=`cat $(workspaces.sonar-credentials.path)/$(params.SONAR_PASSWORD_KEY)`
            replaceValues $(workspaces.source.path)/sonar-project.properties sonar.password "${SONAR_PASSWORD}"
          fi
          if [[ -f $(workspaces.sonar-credentials.path)/$(params.SONAR_LOGIN_KEY) ]]; then
            SONAR_LOGIN=`cat $(workspaces.sonar-credentials.path)/$(params.SONAR_LOGIN_KEY)`
            replaceValues $(workspaces.source.path)/sonar-project.properties sonar.login "${SONAR_LOGIN}"
          fi
        fi
          
      workingDir: $(workspaces.source.path)
    - command:
        - sonar-scanner
      computeResources: {}
      image: $(params.SONAR_SCANNER_IMAGE)
      name: sonar-scan
      workingDir: $(workspaces.source.path)
    - command:
        - sh
        - '-c'
        - |

          sleep 15

          # Install curl and jq
          apt-get update && apt-get install -y curl jq

          # Perform the API request and extract project status
          status=$(curl -s -u $(params.SONAR_LOGIN_KEY):$(params.SONAR_PASSWORD_KEY) "$(params.SONAR_HOST_URL)/api/qualitygates/project_status?projectKey=$(params.SONAR_PROJECT_KEY)" | jq -r '.projectStatus.status')

          # Check project status and exit accordingly
          if [ "$status" != "OK" ]; then
            echo "Quality Gate check failed. Project status is $status"
            exit 1
          else
            echo "Quality Gate check passed."
          fi
      computeResources: {}
      image: ubuntu
      name: check-quality-gate
  workspaces:
    - description: Workspace containing the code which needs to be scanned by SonarQube
      name: source
    - description: Optional workspace where SonarQube properties can be mounted
      name: sonar-settings
      optional: true
    - description: |
        A workspace containing a login or password for use within sonarqube.
      name: sonar-credentials
      optional: true
